// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.1
// source: gopher/v1/gopher.proto

package gopher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GophersManager_Create_FullMethodName = "/gopher.v1.GophersManager/Create"
	GophersManager_Get_FullMethodName    = "/gopher.v1.GophersManager/Get"
	GophersManager_List_FullMethodName   = "/gopher.v1.GophersManager/List"
	GophersManager_Update_FullMethodName = "/gopher.v1.GophersManager/Update"
	GophersManager_Delete_FullMethodName = "/gopher.v1.GophersManager/Delete"
)

// GophersManagerClient is the client API for GophersManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GophersManager allows managing Gophers.
type GophersManagerClient interface {
	// Create a new Gopher.
	Create(ctx context.Context, in *CreateGopherRequest, opts ...grpc.CallOption) (*CreateGopherResponse, error)
	// Retrieve a Gopher by ID if it exists.
	Get(ctx context.Context, in *GetGopherRequest, opts ...grpc.CallOption) (*GetGopherResponse, error)
	// Retrieve all Gophers matching the given query.
	List(ctx context.Context, in *ListGophersRequest, opts ...grpc.CallOption) (*ListGophersResponse, error)
	// Update an existing Gopher by ID.
	Update(ctx context.Context, in *UpdateGopherRequest, opts ...grpc.CallOption) (*UpdateGopherResponse, error)
	// Delete a Gopher by ID.
	Delete(ctx context.Context, in *DeleteGopherRequest, opts ...grpc.CallOption) (*DeleteGopherResponse, error)
}

type gophersManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGophersManagerClient(cc grpc.ClientConnInterface) GophersManagerClient {
	return &gophersManagerClient{cc}
}

func (c *gophersManagerClient) Create(ctx context.Context, in *CreateGopherRequest, opts ...grpc.CallOption) (*CreateGopherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGopherResponse)
	err := c.cc.Invoke(ctx, GophersManager_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophersManagerClient) Get(ctx context.Context, in *GetGopherRequest, opts ...grpc.CallOption) (*GetGopherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGopherResponse)
	err := c.cc.Invoke(ctx, GophersManager_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophersManagerClient) List(ctx context.Context, in *ListGophersRequest, opts ...grpc.CallOption) (*ListGophersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGophersResponse)
	err := c.cc.Invoke(ctx, GophersManager_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophersManagerClient) Update(ctx context.Context, in *UpdateGopherRequest, opts ...grpc.CallOption) (*UpdateGopherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGopherResponse)
	err := c.cc.Invoke(ctx, GophersManager_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophersManagerClient) Delete(ctx context.Context, in *DeleteGopherRequest, opts ...grpc.CallOption) (*DeleteGopherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGopherResponse)
	err := c.cc.Invoke(ctx, GophersManager_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophersManagerServer is the server API for GophersManager service.
// All implementations must embed UnimplementedGophersManagerServer
// for forward compatibility
//
// GophersManager allows managing Gophers.
type GophersManagerServer interface {
	// Create a new Gopher.
	Create(context.Context, *CreateGopherRequest) (*CreateGopherResponse, error)
	// Retrieve a Gopher by ID if it exists.
	Get(context.Context, *GetGopherRequest) (*GetGopherResponse, error)
	// Retrieve all Gophers matching the given query.
	List(context.Context, *ListGophersRequest) (*ListGophersResponse, error)
	// Update an existing Gopher by ID.
	Update(context.Context, *UpdateGopherRequest) (*UpdateGopherResponse, error)
	// Delete a Gopher by ID.
	Delete(context.Context, *DeleteGopherRequest) (*DeleteGopherResponse, error)
	mustEmbedUnimplementedGophersManagerServer()
}

// UnimplementedGophersManagerServer must be embedded to have forward compatible implementations.
type UnimplementedGophersManagerServer struct {
}

func (UnimplementedGophersManagerServer) Create(context.Context, *CreateGopherRequest) (*CreateGopherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGophersManagerServer) Get(context.Context, *GetGopherRequest) (*GetGopherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGophersManagerServer) List(context.Context, *ListGophersRequest) (*ListGophersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGophersManagerServer) Update(context.Context, *UpdateGopherRequest) (*UpdateGopherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGophersManagerServer) Delete(context.Context, *DeleteGopherRequest) (*DeleteGopherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGophersManagerServer) mustEmbedUnimplementedGophersManagerServer() {}

// UnsafeGophersManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophersManagerServer will
// result in compilation errors.
type UnsafeGophersManagerServer interface {
	mustEmbedUnimplementedGophersManagerServer()
}

func RegisterGophersManagerServer(s grpc.ServiceRegistrar, srv GophersManagerServer) {
	s.RegisterService(&GophersManager_ServiceDesc, srv)
}

func _GophersManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGopherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophersManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophersManager_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophersManagerServer).Create(ctx, req.(*CreateGopherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophersManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGopherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophersManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophersManager_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophersManagerServer).Get(ctx, req.(*GetGopherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophersManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGophersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophersManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophersManager_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophersManagerServer).List(ctx, req.(*ListGophersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophersManager_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGopherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophersManagerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophersManager_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophersManagerServer).Update(ctx, req.(*UpdateGopherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophersManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGopherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophersManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophersManager_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophersManagerServer).Delete(ctx, req.(*DeleteGopherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GophersManager_ServiceDesc is the grpc.ServiceDesc for GophersManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophersManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gopher.v1.GophersManager",
	HandlerType: (*GophersManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GophersManager_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GophersManager_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GophersManager_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GophersManager_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GophersManager_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gopher/v1/gopher.proto",
}
